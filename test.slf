// Line comment. No block comments allowed.
Bool: Type =
  @Bool_self {P: Bool -> Type}
  P(true) -> P(false) -> P(Bool_self)

true: Bool =
  new Bool_self lam {P} t f. t

false: Bool =
  new Bool_self lam {P} t f. f

// Boolean negation.
not: Bool -> Bool =
  lam b. (use b){lam _. Bool}(false)(true)

// Here are Church encoded natural numbers.
Nat: Type =
  @Nat_self {P: Nat -> Type}
  (s: {n: Nat} P(n) -> P(succ(n))) ->
  (z: P(zero)) ->
  P(Nat_self)

succ: Nat -> Nat =
  lam n. new Nat_self lam {P} s z. s{n}((use n){P}(s)(z))

zero: Nat =
  new Nat_self lam {P} s z. z

// The predecessor on Church numerals is famously tricky
// to write in lambda calculus. Here with the self-type
// encoding it is actually easier!
pred: Nat -> Nat =
  lam n. (use n){lam _. Nat}(lam {_} p. p)(zero)

// Type whose term are intensional equality proofs.
Equal: {A: Type} A -> A -> Type =
  lam {A} a b.
  @Equal_self {P: (x: A) -> Equal{A}(a)(x) -> Type}
  P(a)(refl{A}(a)) -> P(b)(Equal_self)

refl: {A: Type} (a: A) -> Equal{A}(a)(a) =
  lam {A} a.
  new Equal_self lam {P} r. r

// This proves that double negation results in the noop.
// Doesn't seem like much but consider that functions can
// not be compared for this sort of intensional equality,
// even in languages like Haskell. One can imagine comparing
// quick sort and merge sort for equality (i.e., do they
// produce the same results for all inputs).
double_negation: (b: Bool) -> Equal{Bool}(not(not(b)))(b) =
  lam b.
  //let P = (lam s. Equal{Bool}(not(not(s)))(s))
  (use b){lam s. Equal{Bool}(not(not(s)))(s)}
  (refl{Bool}(true))
  (refl{Bool}(false))

//// Just because we're functional programmers with dependent
//// types at our hands: vectors!
//
//Vect: Nat -> Typ -> Typ =
//  lam len A.
//  @vect {P: Vect(len)(A) -> Typ}
//  (c: {xs: Vect(len)(A)} (x: A) -> P(xs) -> P(cons{len}{A}(x)(xs))) ->
//  (n: P(nil{A})) ->
//  P(vect)
//
//cons: {len: Nat} {A: Typ} A -> Vect(len)(A) -> Vect(succ(len))(A) =
//  lam {len} {A} x xs.
//  lam {P} c n. c{xs}(x)(xs{P}(c)(n))
//
//nil: {A: Typ} Vect(zero)(A) =
//  lam {A}. lam {P} c n. n
