%{
open Self.Syntax.PTerm
open FSharp.Text.Parsing

let getLine (parseState : IParseState) =
  parseState.InputEndPosition(1).Line + 1
%}

%token <string> NAME
%token LAM
%token LET
%token FIX
%token SLF
%token DAT
%token NEW
%token USE
%token TYP
%token ARROW
%token LPAREN
%token RPAREN
%token LCURLY
%token RCURLY
%token DOT
%token COLON
%token EQUAL
%token <int> NUMBER
%token <string> OP
%token EOF


// Expressions.

%start defs
%type <PTerm.PDefs> defs

%start def
%type <PTerm.PDef> def

%start term
%type <PTerm.PTerm> term

// Precedence rules.

%nonassoc LAM LET
%right ARROW

%%

defs:
  | EOF         { Map.empty }
  | def defs    { $2.Add ($1.Name, $1) }
  | defs EOF    { $1 }

def:
  | NAME COLON term EQUAL term 
  { {Line = getLine parseState; Name = $1; PType = $3; PTerm = $5} }

term:
  | LAM lambdabind                            { $2 }
  | LET NAME EQUAL term term                  { PLet ($2, $4, $5) }
  | FIX NAME DOT term                         { PFix ($2, $4) }
  | LPAREN NAME COLON term RPAREN ARROW term  { PAll (false, $2, $4, $7) }
  | term ARROW term                           { PAll (false, "", $1, $3) }
  | LCURLY NAME COLON term RCURLY term        { PAll (true, $2, $4, $6) }
  | SLF NAME term                             { PSlf ($2, $3) }
  | term LPAREN term RPAREN                   { PApp (false, $1, $3) }
  | term LCURLY term RCURLY                   { PApp (true, $1, $3) }
  | term COLON term                           { PAnn ($1, $3) }
  | TYP                                       { PTyp }
  | NAME                                      { PVar $1 }
  | NEW NAME term                             { PNew ($2, $3) }
  | LPAREN USE term RPAREN                    { PUse ($3) }
  | LPAREN term RPAREN                        { $2 }

lambdabind:
  | NAME DOT term                     { PLam (false, $1, $3) }
  | LCURLY NAME RCURLY DOT term       { PLam (true, $2, $5) }
  | NAME lambdabind                   { PLam (false, $1, $2) }
  | LCURLY NAME RCURLY lambdabind     { PLam (true, $2, $4) }